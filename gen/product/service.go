// Code generated by goa v3.16.0, DO NOT EDIT.
//
// product service
//
// Command:
// $ goa gen github.com/y44k0v/grpc-rest-api-ykv/design

package product

import (
	"context"

	productviews "github.com/y44k0v/grpc-rest-api-ykv/gen/product/views"
)

// The Product service allows access to product members
type Service interface {
	// Addproduct implements addproduct.
	Addproduct(context.Context, *AddproductPayload) (err error)
	// Getproduct implements getproduct.
	Getproduct(context.Context, *GetproductPayload) (res *ProductManagement, err error)
	// Showproduct implements showproduct.
	Showproduct(context.Context) (res ProductManagementCollection, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "shop"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "product"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"addproduct", "getproduct", "showproduct"}

// AddproductPayload is the payload type of the product service addproduct
// method.
type AddproductPayload struct {
	// Product SKU number
	ProductSKU string
	// Product Name
	ProductName string
	// Product description
	ProductDescription string
	// Product Price
	ProductPrice float64
}

// GetproductPayload is the payload type of the product service getproduct
// method.
type GetproductPayload struct {
	// Product User
	ProductSKU string
}

// NotFound is the type returned when the requested data that does not exist.
type NotFound struct {
	// Message of error
	Message string
	// ID of missing data
	ID string
}

// ProductManagement is the result type of the product service getproduct
// method.
type ProductManagement struct {
	// SKU is the unique id of the Product.
	ProductSKU string
	// Name of the Product.
	ProductName string
	// Description of the Product.
	ProductDescription string
	// Price of the Product.
	ProductPrice float64
}

// ProductManagementCollection is the result type of the product service
// showproduct method.
type ProductManagementCollection []*ProductManagement

// Error returns an error description.
func (e *NotFound) Error() string {
	return "NotFound is the type returned when the requested data that does not exist."
}

// ErrorName returns "NotFound".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *NotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "NotFound".
func (e *NotFound) GoaErrorName() string {
	return "not_found"
}

// NewProductManagement initializes result type ProductManagement from viewed
// result type ProductManagement.
func NewProductManagement(vres *productviews.ProductManagement) *ProductManagement {
	return newProductManagement(vres.Projected)
}

// NewViewedProductManagement initializes viewed result type ProductManagement
// from result type ProductManagement using the given view.
func NewViewedProductManagement(res *ProductManagement, view string) *productviews.ProductManagement {
	p := newProductManagementView(res)
	return &productviews.ProductManagement{Projected: p, View: "default"}
}

// NewProductManagementCollection initializes result type
// ProductManagementCollection from viewed result type
// ProductManagementCollection.
func NewProductManagementCollection(vres productviews.ProductManagementCollection) ProductManagementCollection {
	return newProductManagementCollection(vres.Projected)
}

// NewViewedProductManagementCollection initializes viewed result type
// ProductManagementCollection from result type ProductManagementCollection
// using the given view.
func NewViewedProductManagementCollection(res ProductManagementCollection, view string) productviews.ProductManagementCollection {
	p := newProductManagementCollectionView(res)
	return productviews.ProductManagementCollection{Projected: p, View: "default"}
}

// newProductManagement converts projected type ProductManagement to service
// type ProductManagement.
func newProductManagement(vres *productviews.ProductManagementView) *ProductManagement {
	res := &ProductManagement{}
	if vres.ProductSKU != nil {
		res.ProductSKU = *vres.ProductSKU
	}
	if vres.ProductName != nil {
		res.ProductName = *vres.ProductName
	}
	if vres.ProductDescription != nil {
		res.ProductDescription = *vres.ProductDescription
	}
	if vres.ProductPrice != nil {
		res.ProductPrice = *vres.ProductPrice
	}
	return res
}

// newProductManagementView projects result type ProductManagement to projected
// type ProductManagementView using the "default" view.
func newProductManagementView(res *ProductManagement) *productviews.ProductManagementView {
	vres := &productviews.ProductManagementView{
		ProductSKU:         &res.ProductSKU,
		ProductName:        &res.ProductName,
		ProductDescription: &res.ProductDescription,
		ProductPrice:       &res.ProductPrice,
	}
	return vres
}

// newProductManagementCollection converts projected type
// ProductManagementCollection to service type ProductManagementCollection.
func newProductManagementCollection(vres productviews.ProductManagementCollectionView) ProductManagementCollection {
	res := make(ProductManagementCollection, len(vres))
	for i, n := range vres {
		res[i] = newProductManagement(n)
	}
	return res
}

// newProductManagementCollectionView projects result type
// ProductManagementCollection to projected type
// ProductManagementCollectionView using the "default" view.
func newProductManagementCollectionView(res ProductManagementCollection) productviews.ProductManagementCollectionView {
	vres := make(productviews.ProductManagementCollectionView, len(res))
	for i, n := range res {
		vres[i] = newProductManagementView(n)
	}
	return vres
}
