// Code generated by goa v3.16.0, DO NOT EDIT.
//
// product endpoints
//
// Command:
// $ goa gen github.com/y44k0v/grpc-rest-api-ykv/design

package product

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "product" service endpoints.
type Endpoints struct {
	Addproduct  goa.Endpoint
	Getproduct  goa.Endpoint
	Showproduct goa.Endpoint
}

// NewEndpoints wraps the methods of the "product" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Addproduct:  NewAddproductEndpoint(s),
		Getproduct:  NewGetproductEndpoint(s),
		Showproduct: NewShowproductEndpoint(s),
	}
}

// Use applies the given middleware to all the "product" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Addproduct = m(e.Addproduct)
	e.Getproduct = m(e.Getproduct)
	e.Showproduct = m(e.Showproduct)
}

// NewAddproductEndpoint returns an endpoint function that calls the method
// "addproduct" of service "product".
func NewAddproductEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*AddproductPayload)
		return nil, s.Addproduct(ctx, p)
	}
}

// NewGetproductEndpoint returns an endpoint function that calls the method
// "getproduct" of service "product".
func NewGetproductEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetproductPayload)
		res, err := s.Getproduct(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedProductManagement(res, "default")
		return vres, nil
	}
}

// NewShowproductEndpoint returns an endpoint function that calls the method
// "showproduct" of service "product".
func NewShowproductEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		res, err := s.Showproduct(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedProductManagementCollection(res, "default")
		return vres, nil
	}
}
