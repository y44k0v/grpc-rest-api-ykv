// Code generated by goa v3.16.0, DO NOT EDIT.
//
// product HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/y44k0v/grpc-rest-api-ykv/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	product "github.com/y44k0v/grpc-rest-api-ykv/gen/product"
	productviews "github.com/y44k0v/grpc-rest-api-ykv/gen/product/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildAddproductRequest instantiates a HTTP request object with method and
// path set to call the "product" service "addproduct" endpoint
func (c *Client) BuildAddproductRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		productSKU string
	)
	{
		p, ok := v.(*product.AddproductPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("product", "addproduct", "*product.AddproductPayload", v)
		}
		productSKU = p.ProductSKU
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddproductProductPath(productSKU)}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("product", "addproduct", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddproductRequest returns an encoder for requests sent to the product
// addproduct server.
func EncodeAddproductRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*product.AddproductPayload)
		if !ok {
			return goahttp.ErrInvalidType("product", "addproduct", "*product.AddproductPayload", v)
		}
		body := NewAddproductRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("product", "addproduct", err)
		}
		return nil
	}
}

// DecodeAddproductResponse returns a decoder for responses returned by the
// product addproduct endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeAddproductResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("product", "addproduct", resp.StatusCode, string(body))
		}
	}
}

// BuildGetproductRequest instantiates a HTTP request object with method and
// path set to call the "product" service "getproduct" endpoint
func (c *Client) BuildGetproductRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		productSKU string
	)
	{
		p, ok := v.(*product.GetproductPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("product", "getproduct", "*product.GetproductPayload", v)
		}
		productSKU = p.ProductSKU
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetproductProductPath(productSKU)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("product", "getproduct", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetproductResponse returns a decoder for responses returned by the
// product getproduct endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeGetproductResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetproductResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("product", "getproduct", err)
			}
			p := NewGetproductProductManagementOK(&body)
			view := "default"
			vres := &productviews.ProductManagement{Projected: p, View: view}
			if err = productviews.ValidateProductManagement(vres); err != nil {
				return nil, goahttp.ErrValidationError("product", "getproduct", err)
			}
			res := product.NewProductManagement(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("product", "getproduct", resp.StatusCode, string(body))
		}
	}
}

// BuildShowproductRequest instantiates a HTTP request object with method and
// path set to call the "product" service "showproduct" endpoint
func (c *Client) BuildShowproductRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowproductProductPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("product", "showproduct", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeShowproductResponse returns a decoder for responses returned by the
// product showproduct endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeShowproductResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowproductResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("product", "showproduct", err)
			}
			p := NewShowproductProductManagementCollectionOK(body)
			view := "default"
			vres := productviews.ProductManagementCollection{Projected: p, View: view}
			if err = productviews.ValidateProductManagementCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("product", "showproduct", err)
			}
			res := product.NewProductManagementCollection(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("product", "showproduct", resp.StatusCode, string(body))
		}
	}
}

// unmarshalProductManagementResponseToProductviewsProductManagementView builds
// a value of type *productviews.ProductManagementView from a value of type
// *ProductManagementResponse.
func unmarshalProductManagementResponseToProductviewsProductManagementView(v *ProductManagementResponse) *productviews.ProductManagementView {
	res := &productviews.ProductManagementView{
		ProductSKU:         v.ProductSKU,
		ProductName:        v.ProductName,
		ProductDescription: v.ProductDescription,
		ProductPrice:       v.ProductPrice,
	}

	return res
}
