// Code generated by goa v3.16.0, DO NOT EDIT.
//
// product HTTP server types
//
// Command:
// $ goa gen github.com/y44k0v/grpc-rest-api-ykv/design

package server

import (
	product "github.com/y44k0v/grpc-rest-api-ykv/gen/product"
	productviews "github.com/y44k0v/grpc-rest-api-ykv/gen/product/views"
	goa "goa.design/goa/v3/pkg"
)

// AddproductRequestBody is the type of the "product" service "addproduct"
// endpoint HTTP request body.
type AddproductRequestBody struct {
	// Product Name
	ProductName *string `form:"ProductName,omitempty" json:"ProductName,omitempty" xml:"ProductName,omitempty"`
	// Product description
	ProductDescription *string `form:"ProductDescription,omitempty" json:"ProductDescription,omitempty" xml:"ProductDescription,omitempty"`
	// Product Price
	ProductPrice *float64 `form:"ProductPrice,omitempty" json:"ProductPrice,omitempty" xml:"ProductPrice,omitempty"`
}

// GetproductResponseBody is the type of the "product" service "getproduct"
// endpoint HTTP response body.
type GetproductResponseBody struct {
	// SKU is the unique id of the Product.
	ProductSKU string `form:"ProductSKU" json:"ProductSKU" xml:"ProductSKU"`
	// Name of the Product.
	ProductName string `form:"ProductName" json:"ProductName" xml:"ProductName"`
	// Description of the Product.
	ProductDescription string `form:"ProductDescription" json:"ProductDescription" xml:"ProductDescription"`
	// Price of the Product.
	ProductPrice float64 `form:"ProductPrice" json:"ProductPrice" xml:"ProductPrice"`
}

// ProductManagementResponseCollection is the type of the "product" service
// "showproduct" endpoint HTTP response body.
type ProductManagementResponseCollection []*ProductManagementResponse

// ProductManagementResponse is used to define fields on response body types.
type ProductManagementResponse struct {
	// SKU is the unique id of the Product.
	ProductSKU string `form:"ProductSKU" json:"ProductSKU" xml:"ProductSKU"`
	// Name of the Product.
	ProductName string `form:"ProductName" json:"ProductName" xml:"ProductName"`
	// Description of the Product.
	ProductDescription string `form:"ProductDescription" json:"ProductDescription" xml:"ProductDescription"`
	// Price of the Product.
	ProductPrice float64 `form:"ProductPrice" json:"ProductPrice" xml:"ProductPrice"`
}

// NewGetproductResponseBody builds the HTTP response body from the result of
// the "getproduct" endpoint of the "product" service.
func NewGetproductResponseBody(res *productviews.ProductManagementView) *GetproductResponseBody {
	body := &GetproductResponseBody{
		ProductSKU:         *res.ProductSKU,
		ProductName:        *res.ProductName,
		ProductDescription: *res.ProductDescription,
		ProductPrice:       *res.ProductPrice,
	}
	return body
}

// NewProductManagementResponseCollection builds the HTTP response body from
// the result of the "showproduct" endpoint of the "product" service.
func NewProductManagementResponseCollection(res productviews.ProductManagementCollectionView) ProductManagementResponseCollection {
	body := make([]*ProductManagementResponse, len(res))
	for i, val := range res {
		body[i] = marshalProductviewsProductManagementViewToProductManagementResponse(val)
	}
	return body
}

// NewAddproductPayload builds a product service addproduct endpoint payload.
func NewAddproductPayload(body *AddproductRequestBody, productSKU string) *product.AddproductPayload {
	v := &product.AddproductPayload{
		ProductName:        *body.ProductName,
		ProductDescription: *body.ProductDescription,
		ProductPrice:       *body.ProductPrice,
	}
	v.ProductSKU = productSKU

	return v
}

// NewGetproductPayload builds a product service getproduct endpoint payload.
func NewGetproductPayload(productSKU string) *product.GetproductPayload {
	v := &product.GetproductPayload{}
	v.ProductSKU = productSKU

	return v
}

// ValidateAddproductRequestBody runs the validations defined on
// AddproductRequestBody
func ValidateAddproductRequestBody(body *AddproductRequestBody) (err error) {
	if body.ProductName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ProductName", "body"))
	}
	if body.ProductDescription == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ProductDescription", "body"))
	}
	if body.ProductPrice == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ProductPrice", "body"))
	}
	return
}
