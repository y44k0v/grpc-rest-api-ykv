// Code generated by goa v3.16.0, DO NOT EDIT.
//
// product HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/y44k0v/grpc-rest-api-ykv/design

package server

import (
	"context"
	"io"
	"net/http"

	productviews "github.com/y44k0v/grpc-rest-api-ykv/gen/product/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeAddproductResponse returns an encoder for responses returned by the
// product addproduct endpoint.
func EncodeAddproductResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusCreated)
		return nil
	}
}

// DecodeAddproductRequest returns a decoder for requests sent to the product
// addproduct endpoint.
func DecodeAddproductRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body AddproductRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateAddproductRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			productSKU string

			params = mux.Vars(r)
		)
		productSKU = params["ProductSKU"]
		payload := NewAddproductPayload(&body, productSKU)

		return payload, nil
	}
}

// EncodeGetproductResponse returns an encoder for responses returned by the
// product getproduct endpoint.
func EncodeGetproductResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(*productviews.ProductManagement)
		enc := encoder(ctx, w)
		body := NewGetproductResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetproductRequest returns a decoder for requests sent to the product
// getproduct endpoint.
func DecodeGetproductRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			productSKU string

			params = mux.Vars(r)
		)
		productSKU = params["ProductSKU"]
		payload := NewGetproductPayload(productSKU)

		return payload, nil
	}
}

// EncodeShowproductResponse returns an encoder for responses returned by the
// product showproduct endpoint.
func EncodeShowproductResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(productviews.ProductManagementCollection)
		enc := encoder(ctx, w)
		body := NewProductManagementResponseCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// marshalProductviewsProductManagementViewToProductManagementResponse builds a
// value of type *ProductManagementResponse from a value of type
// *productviews.ProductManagementView.
func marshalProductviewsProductManagementViewToProductManagementResponse(v *productviews.ProductManagementView) *ProductManagementResponse {
	res := &ProductManagementResponse{
		ProductSKU:         *v.ProductSKU,
		ProductName:        *v.ProductName,
		ProductDescription: *v.ProductDescription,
		ProductPrice:       *v.ProductPrice,
	}

	return res
}
