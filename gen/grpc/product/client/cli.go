// Code generated by goa v3.16.0, DO NOT EDIT.
//
// product gRPC client CLI support package
//
// Command:
// $ goa gen github.com/y44k0v/grpc-rest-api-ykv/design

package client

import (
	"encoding/json"
	"fmt"

	productpb "github.com/y44k0v/grpc-rest-api-ykv/gen/grpc/product/pb"
	product "github.com/y44k0v/grpc-rest-api-ykv/gen/product"
)

// BuildAddproductPayload builds the payload for the product addproduct
// endpoint from CLI flags.
func BuildAddproductPayload(productAddproductMessage string) (*product.AddproductPayload, error) {
	var err error
	var message productpb.AddproductRequest
	{
		if productAddproductMessage != "" {
			err = json.Unmarshal([]byte(productAddproductMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"ProductDescription\": \"Voluptate natus accusantium.\",\n      \"ProductName\": \"Veniam magnam ut nostrum ut quia.\",\n      \"ProductPrice\": 0.7005724951788234,\n      \"ProductSKU\": \"Cupiditate excepturi voluptatem asperiores eos consequatur.\"\n   }'")
			}
		}
	}
	v := &product.AddproductPayload{
		ProductSKU:         message.ProductSku,
		ProductName:        message.ProductName,
		ProductDescription: message.ProductDescription,
		ProductPrice:       message.ProductPrice,
	}

	return v, nil
}

// BuildGetproductPayload builds the payload for the product getproduct
// endpoint from CLI flags.
func BuildGetproductPayload(productGetproductMessage string) (*product.GetproductPayload, error) {
	var err error
	var message productpb.GetproductRequest
	{
		if productGetproductMessage != "" {
			err = json.Unmarshal([]byte(productGetproductMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"ProductSKU\": \"Ut et quia eos corporis.\"\n   }'")
			}
		}
	}
	v := &product.GetproductPayload{
		ProductSKU: message.ProductSku,
	}

	return v, nil
}
