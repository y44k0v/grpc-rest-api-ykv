// Code generated by goa v3.16.0, DO NOT EDIT.
//
// product gRPC client
//
// Command:
// $ goa gen github.com/y44k0v/grpc-rest-api-ykv/design

package client

import (
	"context"

	productpb "github.com/y44k0v/grpc-rest-api-ykv/gen/grpc/product/pb"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc"
)

// Client lists the service endpoint gRPC clients.
type Client struct {
	grpccli productpb.ProductClient
	opts    []grpc.CallOption
}

// NewClient instantiates gRPC client for all the product service servers.
func NewClient(cc *grpc.ClientConn, opts ...grpc.CallOption) *Client {
	return &Client{
		grpccli: productpb.NewProductClient(cc),
		opts:    opts,
	}
}

// Addproduct calls the "Addproduct" function in productpb.ProductClient
// interface.
func (c *Client) Addproduct() goa.Endpoint {
	return func(ctx context.Context, v any) (any, error) {
		inv := goagrpc.NewInvoker(
			BuildAddproductFunc(c.grpccli, c.opts...),
			EncodeAddproductRequest,
			nil)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault(err.Error())
		}
		return res, nil
	}
}

// Getproduct calls the "Getproduct" function in productpb.ProductClient
// interface.
func (c *Client) Getproduct() goa.Endpoint {
	return func(ctx context.Context, v any) (any, error) {
		inv := goagrpc.NewInvoker(
			BuildGetproductFunc(c.grpccli, c.opts...),
			EncodeGetproductRequest,
			DecodeGetproductResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault(err.Error())
		}
		return res, nil
	}
}

// Showproduct calls the "Showproduct" function in productpb.ProductClient
// interface.
func (c *Client) Showproduct() goa.Endpoint {
	return func(ctx context.Context, v any) (any, error) {
		inv := goagrpc.NewInvoker(
			BuildShowproductFunc(c.grpccli, c.opts...),
			nil,
			DecodeShowproductResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			return nil, goa.Fault(err.Error())
		}
		return res, nil
	}
}
