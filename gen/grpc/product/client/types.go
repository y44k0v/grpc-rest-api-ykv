// Code generated by goa v3.16.0, DO NOT EDIT.
//
// product gRPC client types
//
// Command:
// $ goa gen github.com/y44k0v/grpc-rest-api-ykv/design

package client

import (
	productpb "github.com/y44k0v/grpc-rest-api-ykv/gen/grpc/product/pb"
	product "github.com/y44k0v/grpc-rest-api-ykv/gen/product"
	productviews "github.com/y44k0v/grpc-rest-api-ykv/gen/product/views"
)

// NewProtoAddproductRequest builds the gRPC request type from the payload of
// the "addproduct" endpoint of the "product" service.
func NewProtoAddproductRequest(payload *product.AddproductPayload) *productpb.AddproductRequest {
	message := &productpb.AddproductRequest{
		ProductSku:         payload.ProductSKU,
		ProductName:        payload.ProductName,
		ProductDescription: payload.ProductDescription,
		ProductPrice:       payload.ProductPrice,
	}
	return message
}

// NewProtoGetproductRequest builds the gRPC request type from the payload of
// the "getproduct" endpoint of the "product" service.
func NewProtoGetproductRequest(payload *product.GetproductPayload) *productpb.GetproductRequest {
	message := &productpb.GetproductRequest{
		ProductSku: payload.ProductSKU,
	}
	return message
}

// NewGetproductResult builds the result type of the "getproduct" endpoint of
// the "product" service from the gRPC response type.
func NewGetproductResult(message *productpb.GetproductResponse) *productviews.ProductManagementView {
	result := &productviews.ProductManagementView{
		ProductSKU:         &message.ProductSku,
		ProductName:        &message.ProductName,
		ProductDescription: &message.ProductDescription,
		ProductPrice:       &message.ProductPrice,
	}
	return result
}

// NewProtoShowproductRequest builds the gRPC request type from the payload of
// the "showproduct" endpoint of the "product" service.
func NewProtoShowproductRequest() *productpb.ShowproductRequest {
	message := &productpb.ShowproductRequest{}
	return message
}

// NewShowproductResult builds the result type of the "showproduct" endpoint of
// the "product" service from the gRPC response type.
func NewShowproductResult(message *productpb.ProductManagementCollection) productviews.ProductManagementCollectionView {
	result := make([]*productviews.ProductManagementView, len(message.Field))
	for i, val := range message.Field {
		result[i] = &productviews.ProductManagementView{
			ProductSKU:         &val.ProductSku,
			ProductName:        &val.ProductName,
			ProductDescription: &val.ProductDescription,
			ProductPrice:       &val.ProductPrice,
		}
	}
	return result
}
