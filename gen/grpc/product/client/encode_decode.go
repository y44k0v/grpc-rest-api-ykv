// Code generated by goa v3.16.0, DO NOT EDIT.
//
// product gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/y44k0v/grpc-rest-api-ykv/design

package client

import (
	"context"

	productpb "github.com/y44k0v/grpc-rest-api-ykv/gen/grpc/product/pb"
	product "github.com/y44k0v/grpc-rest-api-ykv/gen/product"
	productviews "github.com/y44k0v/grpc-rest-api-ykv/gen/product/views"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildAddproductFunc builds the remote method to invoke for "product" service
// "addproduct" endpoint.
func BuildAddproductFunc(grpccli productpb.ProductClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Addproduct(ctx, reqpb.(*productpb.AddproductRequest), opts...)
		}
		return grpccli.Addproduct(ctx, &productpb.AddproductRequest{}, opts...)
	}
}

// EncodeAddproductRequest encodes requests sent to product addproduct endpoint.
func EncodeAddproductRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*product.AddproductPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("product", "addproduct", "*product.AddproductPayload", v)
	}
	return NewProtoAddproductRequest(payload), nil
}

// BuildGetproductFunc builds the remote method to invoke for "product" service
// "getproduct" endpoint.
func BuildGetproductFunc(grpccli productpb.ProductClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Getproduct(ctx, reqpb.(*productpb.GetproductRequest), opts...)
		}
		return grpccli.Getproduct(ctx, &productpb.GetproductRequest{}, opts...)
	}
}

// EncodeGetproductRequest encodes requests sent to product getproduct endpoint.
func EncodeGetproductRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*product.GetproductPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("product", "getproduct", "*product.GetproductPayload", v)
	}
	return NewProtoGetproductRequest(payload), nil
}

// DecodeGetproductResponse decodes responses from the product getproduct
// endpoint.
func DecodeGetproductResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*productpb.GetproductResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("product", "getproduct", "*productpb.GetproductResponse", v)
	}
	res := NewGetproductResult(message)
	vres := &productviews.ProductManagement{Projected: res, View: view}
	if err := productviews.ValidateProductManagement(vres); err != nil {
		return nil, err
	}
	return product.NewProductManagement(vres), nil
}

// BuildShowproductFunc builds the remote method to invoke for "product"
// service "showproduct" endpoint.
func BuildShowproductFunc(grpccli productpb.ProductClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Showproduct(ctx, reqpb.(*productpb.ShowproductRequest), opts...)
		}
		return grpccli.Showproduct(ctx, &productpb.ShowproductRequest{}, opts...)
	}
}

// DecodeShowproductResponse decodes responses from the product showproduct
// endpoint.
func DecodeShowproductResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*productpb.ProductManagementCollection)
	if !ok {
		return nil, goagrpc.ErrInvalidType("product", "showproduct", "*productpb.ProductManagementCollection", v)
	}
	res := NewShowproductResult(message)
	vres := productviews.ProductManagementCollection{Projected: res, View: view}
	if err := productviews.ValidateProductManagementCollection(vres); err != nil {
		return nil, err
	}
	return product.NewProductManagementCollection(vres), nil
}
