// Code generated by goa v3.16.0, DO NOT EDIT.
//
// product gRPC server
//
// Command:
// $ goa gen github.com/y44k0v/grpc-rest-api-ykv/design

package server

import (
	"context"

	productpb "github.com/y44k0v/grpc-rest-api-ykv/gen/grpc/product/pb"
	product "github.com/y44k0v/grpc-rest-api-ykv/gen/product"
	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
)

// Server implements the productpb.ProductServer interface.
type Server struct {
	AddproductH  goagrpc.UnaryHandler
	GetproductH  goagrpc.UnaryHandler
	ShowproductH goagrpc.UnaryHandler
	productpb.UnimplementedProductServer
}

// New instantiates the server struct with the product service endpoints.
func New(e *product.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		AddproductH:  NewAddproductHandler(e.Addproduct, uh),
		GetproductH:  NewGetproductHandler(e.Getproduct, uh),
		ShowproductH: NewShowproductHandler(e.Showproduct, uh),
	}
}

// NewAddproductHandler creates a gRPC handler which serves the "product"
// service "addproduct" endpoint.
func NewAddproductHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeAddproductRequest, EncodeAddproductResponse)
	}
	return h
}

// Addproduct implements the "Addproduct" method in productpb.ProductServer
// interface.
func (s *Server) Addproduct(ctx context.Context, message *productpb.AddproductRequest) (*productpb.AddproductResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "addproduct")
	ctx = context.WithValue(ctx, goa.ServiceKey, "product")
	resp, err := s.AddproductH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*productpb.AddproductResponse), nil
}

// NewGetproductHandler creates a gRPC handler which serves the "product"
// service "getproduct" endpoint.
func NewGetproductHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeGetproductRequest, EncodeGetproductResponse)
	}
	return h
}

// Getproduct implements the "Getproduct" method in productpb.ProductServer
// interface.
func (s *Server) Getproduct(ctx context.Context, message *productpb.GetproductRequest) (*productpb.GetproductResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "getproduct")
	ctx = context.WithValue(ctx, goa.ServiceKey, "product")
	resp, err := s.GetproductH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*productpb.GetproductResponse), nil
}

// NewShowproductHandler creates a gRPC handler which serves the "product"
// service "showproduct" endpoint.
func NewShowproductHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, nil, EncodeShowproductResponse)
	}
	return h
}

// Showproduct implements the "Showproduct" method in productpb.ProductServer
// interface.
func (s *Server) Showproduct(ctx context.Context, message *productpb.ShowproductRequest) (*productpb.ProductManagementCollection, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "showproduct")
	ctx = context.WithValue(ctx, goa.ServiceKey, "product")
	resp, err := s.ShowproductH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*productpb.ProductManagementCollection), nil
}
