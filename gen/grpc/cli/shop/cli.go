// Code generated by goa v3.16.0, DO NOT EDIT.
//
// shop gRPC client CLI support package
//
// Command:
// $ goa gen github.com/y44k0v/grpc-rest-api-ykv/design

package cli

import (
	"flag"
	"fmt"
	"os"

	productc "github.com/y44k0v/grpc-rest-api-ykv/gen/grpc/product/client"
	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `product (addproduct|getproduct|showproduct)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` product addproduct --message '{
      "ProductDescription": "Voluptate natus accusantium.",
      "ProductName": "Veniam magnam ut nostrum ut quia.",
      "ProductPrice": 0.7005724951788234,
      "ProductSKU": "Cupiditate excepturi voluptatem asperiores eos consequatur."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, any, error) {
	var (
		productFlags = flag.NewFlagSet("product", flag.ContinueOnError)

		productAddproductFlags       = flag.NewFlagSet("addproduct", flag.ExitOnError)
		productAddproductMessageFlag = productAddproductFlags.String("message", "", "")

		productGetproductFlags       = flag.NewFlagSet("getproduct", flag.ExitOnError)
		productGetproductMessageFlag = productGetproductFlags.String("message", "", "")

		productShowproductFlags = flag.NewFlagSet("showproduct", flag.ExitOnError)
	)
	productFlags.Usage = productUsage
	productAddproductFlags.Usage = productAddproductUsage
	productGetproductFlags.Usage = productGetproductUsage
	productShowproductFlags.Usage = productShowproductUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "product":
			svcf = productFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "product":
			switch epn {
			case "addproduct":
				epf = productAddproductFlags

			case "getproduct":
				epf = productGetproductFlags

			case "showproduct":
				epf = productShowproductFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "product":
			c := productc.NewClient(cc, opts...)
			switch epn {
			case "addproduct":
				endpoint = c.Addproduct()
				data, err = productc.BuildAddproductPayload(*productAddproductMessageFlag)
			case "getproduct":
				endpoint = c.Getproduct()
				data, err = productc.BuildGetproductPayload(*productGetproductMessageFlag)
			case "showproduct":
				endpoint = c.Showproduct()
				data = nil
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// productUsage displays the usage of the product command and its subcommands.
func productUsage() {
	fmt.Fprintf(os.Stderr, `The Product service allows access to product members
Usage:
    %[1]s [globalflags] product COMMAND [flags]

COMMAND:
    addproduct: Addproduct implements addproduct.
    getproduct: Getproduct implements getproduct.
    showproduct: Showproduct implements showproduct.

Additional help:
    %[1]s product COMMAND --help
`, os.Args[0])
}
func productAddproductUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] product addproduct -message JSON

Addproduct implements addproduct.
    -message JSON: 

Example:
    %[1]s product addproduct --message '{
      "ProductDescription": "Voluptate natus accusantium.",
      "ProductName": "Veniam magnam ut nostrum ut quia.",
      "ProductPrice": 0.7005724951788234,
      "ProductSKU": "Cupiditate excepturi voluptatem asperiores eos consequatur."
   }'
`, os.Args[0])
}

func productGetproductUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] product getproduct -message JSON

Getproduct implements getproduct.
    -message JSON: 

Example:
    %[1]s product getproduct --message '{
      "ProductSKU": "Ut et quia eos corporis."
   }'
`, os.Args[0])
}

func productShowproductUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] product showproduct

Showproduct implements showproduct.

Example:
    %[1]s product showproduct
`, os.Args[0])
}
